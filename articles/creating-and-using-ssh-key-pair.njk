---
layout: layouts/article-layout.njk
title: "Creating and using an SSH key pair"
date: 2020-08-25
tags: ["article"]
preview: "OpenSSH took the pain away."
description: "This walkthrough focuses on adding SSH to Github on Windows, but the process for other services or on another OS is quite similar."
---
<h1>{{ title }}</h1>
<p>For some reason, I've struggled in the past with <strong>creating an SSH key pair</strong> and <strong>adding it to an online service like Github</strong>. This walkthrough focuses on just that for Github on Windows, but the process for other services or on another OS is quite similar.</p>
<h2>What is SSH?</h2>
<p>SSH is a protocol for <strong>secure network communication</strong>, based on the principle of <strong>public-key cryptography</strong>. I like the analogy of one of my lecturers who said we need to see it as an unlimited stash of locks <i>(= public keys)</i>. And we can provide any service with one of our locks and ask them to install it on their entrance door. We can then enter at any given time by using our <i>(private)</i> key.</p>
<p>So we'll now add a <i>lock</i> to Github and use our key to open the (virtual) door. This will <strong>prevent us from having to authenticate with our username and password</strong> every time we push, pull or otherwise interact with Github.</p>
<h2>Requirements</h2>
<ul>
    <li>Windows 10</li>
    <li>OpenSSH installed and activated. This should be the case by default on the latest versions of Windows 10. If it's not, please refer to <a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse#installing-openssh-from-the-settings-ui-on-windows-server-2019-or-windows-10-1809" target="_blank" rel="noopener">this page</a>.</li>
</ul>
<h2>Creating a new key</h2>
<ul>
    <li>Launch the command prompt.</li>
    <li>Type <i>ssh-keygen.exe</i> and press *Enter*.</li>
    <li>Press <i>Enter</i> again to save the key in the default file and folder (<i>c:\Users\yourUsername\.ssh\id_rsa</i>). I would advise against using another folder to store the key, as this might lead to permission issues. If you already have a key with the default name in that folder and you want to keep it, make sure to specify another file name (i.e. <i>c:\Users\yourUsername\.ssh\id_rsa2</i>).</li>
    <li>I would suggest to leave the passphrase empty. If you don't, you will be prompted to enter it every time you connect to the service. Just remember that you can add that extra layer of security if needed.</li>
    <li>Multiple confirmation messages will appear on your screen:
        <ul>
            <li><i>"Your identification has been saved in c:\..."</i>: This is the location of your private key.</li>
            <li><i>"Your public key has been saved in c:\..."</i>: Obviously, this is the location of your public key.</li>
            <li><i>"The key fingerprint is: ..."</i> and <i>"The key's randomart image is ..."</i>: Just remember that both the fingerprint and the randomart image are simply a representation of your public key, making it easier to verify the authenticity of the server you are connecting to. Comparing the full key string, when in doubt, would be cumbersome.</li>
        </ul>
    </li>
</ul>
<p><img src="/assets/img/ssh-keygen-cmd.PNG" alt="SSH keygen example in Windows command prompt" width="100%" /></p>
<p><i>Note: if you'd like to learn more about randomart, <a href="https://aarontoponce.org/drunken_bishop.pdf" target="_blank" rel="noopener">"The Drunken Bishop"</a> is an excellent paper that will tell you all about it. Thanks to <a href="https://pthree.org/2013/05/30/openssh-keys-and-the-drunken-bishop/" target="_blank" rel="noopener">Aaron Toponce</a> for summarizing and archiving it.</i></p>
<h2>Adding the key to Github</h2>
<ul>
    <li>Go to the folder containing your keypair (<i>c:\Users\username\.ssh</i> by default) and open the .pub file with a text editor.</li>
    <li>Copy the key but exclude the part after the final space (<i>username@device-name</i>).</li>
    <li>In Github, go to <i>Settings -> SSH and GPG keys -> New SSH key</i></li>
</ul>
<p><img src="/assets/img/github-add-ssh-key.PNG" alt="Github settings page to add SSH key" width="100%" /></p>
<h2>Testing it out</h2>
<ul>
    <li>When you're ready to test it out, make a commit on one of your local repositories and push the changes. Your terminal will state <i>"The authenticity of host 'github.com (140.82.118.3)' can't be established. RSA key fingerprint is SHA256:[...]. Are you sure you want to continue connecting (yes/no/[fingerprint])?"</i></li>
    <li>Enter <i>"yes"</i> to add Github to known_hosts, a file which resides in the same folder as your key pair. As a best practice, when connecting to a new service (or more specifically: server) via SSH, you should first add the domain name or IP address to this file, together with the public key.</li>
</ul>
<p><strong>Congratulations!</strong> You can now securely connect to Github via SSH.</p>
<h2>Remember!</h2>
<ul>
    <li>Never share your private key with anyone.</li>
    <li>Do not copy the key to another device. If you want to connect via SSH from another device, create a new key pair by following the same steps in this article.</li>
</ul>